Metadata-Version: 2.4
Name: meshachvetz
Version: 0.1.0
Summary: A suite of tools for optimal student class assignment
Home-page: https://github.com/meshachvetz/meshachvetz
Author: Gili Bee
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Education
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: pandas>=1.3.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: ortools>=9.0
Requires-Dist: pytest>=7.0
Requires-Dist: black>=22.0
Requires-Dist: flake8>=4.0
Requires-Dist: mypy>=0.950
Requires-Dist: scipy>=1.7.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: flake8>=4.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Meshachvetz - Student Class Assignment Optimizer

A comprehensive suite of tools designed to help educators create balanced student class assignments based on multiple criteria including social preferences, academic balance, and demographic distribution.

## Features

- **Three-Layer Scoring System**: Student satisfaction, class balance, and school-wide equity
- **Multiple Optimization Algorithms**: Genetic algorithms, simulated annealing, OR-Tools integration (Coming in Phase 2)
- **Flexible Configuration**: YAML-based configuration for weights and parameters
- **Comprehensive Reporting**: Detailed CSV reports and analytics
- **Force Constraints**: Support for mandatory class and friend group placements

## Installation

### üéØ Easy Installation (Recommended)

**Windows Users:**
1. Download the project files
2. Double-click `install.bat`
3. Wait for installation to complete
4. You're ready to use Meshachvetz!

**Mac/Linux Users:**
1. Download the project files
2. Double-click `install.sh` (or run `./install.sh` in terminal)
3. Wait for installation to complete
4. You're ready to use Meshachvetz!

### Prerequisites
- Python 3.8 or higher
- Windows, macOS, or Linux

### üîß Manual Installation (Advanced Users)

If you prefer manual installation:

```bash
# Create virtual environment
python -m venv meshachvetz_env

# Activate virtual environment
# Windows: meshachvetz_env\Scripts\activate
# Mac/Linux: source meshachvetz_env/bin/activate

# Install Meshachvetz
pip install -e .
```

### ‚úÖ Verify Installation

After installation, test that everything works:

**Windows:** Double-click `run_meshachvetz.bat`
**Mac/Linux:** Run `./run_meshachvetz.sh`

You should see the help message if everything is working correctly.

## Quick Start

### 1. Prepare Your Data
Create a CSV file with student data following the specified format (see [Data Format Specification](docs/02_data_format_specification.md)).

### 2. Score an Assignment
```python
from meshachvetz import Scorer

# Create scorer with default configuration
scorer = Scorer()

# Score a CSV file
result = scorer.score_csv_file('students.csv')

# Display results
print(f"Final Score: {result.final_score:.2f}/100")
print(f"Student Satisfaction: {result.student_layer_score:.2f}/100")
print(f"Class Balance: {result.class_layer_score:.2f}/100")
print(f"School Balance: {result.school_layer_score:.2f}/100")

# Generate detailed report
report = scorer.get_detailed_report(result)
print(report)
```

### 3. Customize Configuration
```python
from meshachvetz import Scorer, Config

# Load custom configuration
config = Config('config/custom_scoring.yaml')

# Or modify weights programmatically
config = Config()
config.update_weights(
    friends=0.8,        # Higher weight for friend satisfaction
    student_layer=0.6   # Higher weight for student layer
)

scorer = Scorer(config)
result = scorer.score_csv_file('students.csv')
```

### 4. Run Demo
```bash
python examples/demo_scorer.py
```

## Command-Line Interface

For users who prefer command-line tools, Meshachvetz includes a comprehensive CLI:

### Basic Usage

**Windows:**
```bash
# Score student assignments
run_meshachvetz.bat score your_students.csv

# Generate detailed reports
run_meshachvetz.bat score your_students.csv --reports

# Validate data format
run_meshachvetz.bat validate your_students.csv

# View configuration
run_meshachvetz.bat show-config
```

**Mac/Linux:**
```bash
# Score student assignments
./run_meshachvetz.sh score your_students.csv

# Generate detailed reports
./run_meshachvetz.sh score your_students.csv --reports

# Validate data format
./run_meshachvetz.sh validate your_students.csv

# View configuration
./run_meshachvetz.sh show-config
```

### Example Output

```
üèÜ MESHACHVETZ SCORING RESULTS
Final Score: 99.84/100

üìä Layer Breakdown:
   Student Layer: 100.00/100 (weight: 0.5)
   Class Layer:   100.00/100 (weight: 0.2)
   School Layer:  99.48/100 (weight: 0.3)

üë• Students: 30 | Classes: 5
üìà Friend Satisfaction: 100.0% | Conflicts: 0.0%
```

### Advanced Options

**Windows:**
```bash
# Adjust scoring weights
run_meshachvetz.bat score students.csv --student-weight 0.7 --class-weight 0.2

# Quiet mode for scripts
run_meshachvetz.bat score students.csv --quiet

# Verbose output with detailed analysis
run_meshachvetz.bat score students.csv --verbose --detailed
```

**Mac/Linux:**
```bash
# Adjust scoring weights
./run_meshachvetz.sh score students.csv --student-weight 0.7 --class-weight 0.2

# Quiet mode for scripts
./run_meshachvetz.sh score students.csv --quiet

# Verbose output with detailed analysis
./run_meshachvetz.sh score students.csv --verbose --detailed
```

**üìñ For complete CLI documentation, see the [CLI User Guide](docs/CLI_USER_GUIDE.md)**

## Documentation

- [Project Overview](docs/01_project_overview.md)
- [Data Format Specification](docs/02_data_format_specification.md)
- [Scorer Design](docs/03_scorer_design.md)
- [Optimizer Design](docs/04_optimizer_design.md)
- [Implementation Plan](docs/05_implementation_plan.md)
- [Technical Specifications](docs/06_technical_specifications.md)
- [Phase 2 Simple Guide](docs/07_phase2_simple_guide.md) - **Implementation roadmap for Phase 2**
- [CLI User Guide](docs/CLI_USER_GUIDE.md) - **Start here for command-line usage**
- [Troubleshooting Guide](docs/TROUBLESHOOTING.md) - **Solutions for common issues**

## Development Status

### ‚úÖ Phase 1 Complete - Ready for Phase 2

**Current Status**: The Meshachvetz scoring system is fully functional and ready for production use.

**Completed Features**:
- ‚úÖ Three-layer scoring system (Student, Class, School)
- ‚úÖ Professional CLI with detailed statistics
- ‚úÖ Cross-platform installation system
- ‚úÖ Comprehensive CSV reporting
- ‚úÖ Data validation and error handling
- ‚úÖ Configuration-driven operation
- ‚úÖ Performance optimization (457 students/second)
- ‚úÖ Complete documentation and user guides

**Coming in Phase 2** (Optimizer Foundation):
- üöß Optimization algorithms (genetic, simulated annealing, OR-Tools)
- üöß Automated assignment generation
- üöß Multi-algorithm optimization strategies
- üöß Advanced constraint handling

## Usage Examples

### Scoring System Architecture

The Meshachvetz scoring system uses a three-layer architecture:

1. **Student Layer (Individual Satisfaction)**
   - Friend Satisfaction: How many preferred friends are in the same class
   - Conflict Avoidance: How many disliked peers are avoided

2. **Class Layer (Intra-Class Balance)**
   - Gender Balance: How evenly distributed genders are within each class

3. **School Layer (Inter-Class Balance)**
   - Academic Balance: How evenly academic scores are distributed across classes
   - Behavior Balance: How evenly behavior ranks are distributed across classes
   - Size Balance: How evenly students are distributed across classes
   - Assistance Balance: How evenly assistance packages are distributed across classes

### Sample Output

```
üèÜ SCORING RESULTS
Final Score: 75.18/100
Total Students: 8
Total Classes: 3

üìä Layer Breakdown:
   Student Layer: 61.25/100 (weight: 0.5)
   Class Layer:   77.78/100 (weight: 0.2)
   School Layer:  96.67/100 (weight: 0.3)

üë• Student Satisfaction Analysis:
   Average Satisfaction: 61.25/100
   Highly Satisfied (‚â•75): 4/8
   Students with Friends Placed: 4/8
   Students with Conflicts: 1/8
```

## Contributing

This project follows a structured, phase-based development approach. Please see the [Implementation Plan](docs/05_implementation_plan.md) for current development priorities.

## Testing

Run the comprehensive test suite:

```bash
# Test Week 1 (Data Layer)
python tests/test_week1_implementation.py

# Test Week 2 (Scorer Implementation)
python tests/test_week2_implementation.py
```

## License

This project is licensed under the MIT License.

## Support

For questions and support, please refer to the documentation in the `docs/` directory. 
